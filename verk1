import numpy as np
data=np.load('docmatrix.npz')
X=data['X']
y=data['y']
terms=data['terms']
y[y==2]=-1
y[y==3]=-1
#skilgreinum n
n=X.shape[0]
rnd=np.random.permutation(n) # Slembin umröðun talnanna 1,...,n
nfrac=0.7 # Hlutfall gagna sem er notað til þjálfunar
nfrac1=0.3

#train og test fyrir n
n_train1=int(nfrac*n)
n_test1=int(nfrac1*n)

#train fyrir y og x
x_train1=X[rnd[0:n_train1],:]
y_train1=y[rnd[0:n_train1]]

#test fyrir y og x
x_test1=X[rnd[n_train1:],:]
y_test1=y[rnd[n_train1:]]

#flokkum train og test gögn
#y_train1[y_train1==3]=-1
#y_train1[y_train1==2]=-1
#y_test1[y_test1==3]=-1
#y_test1[y_test1==2]=-1

#np.c_ og np.ones
A = np.c_[np.ones(n_test1), x_test1]
B = np.c_[np.ones(n_train1), x_train1]

#þeta
theta,res,rank,_ = np.linalg.lstsq(A, y_test1, rcond=False)
theta1,res1,rank1,_ = np.linalg.lstsq(B, y_train1, rcond=False)
ypred1=np.sign(np.dot(A,theta))

#prentum
print("theta fyrir A og y_test1:", theta)
print("theta1 fyrir B og y_train1 :", theta1)
print("np.sum(y_train1 != ypred1)/n:", np.sum(y_train1 != ypred1)/n)
print("np.sum(y_train1 != ypred1)/n_test1 =", np.sum(y_train1 != ypred1)/n_test1)
print("np.sum(y_test1 != ypred1)/n_train1 =", np.sum(y_test1 != ypred1)/n_train1)
